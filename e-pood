from datetime import datetime

class Client:
    def __init__(self, id, client_type, money):
        """Creates the client class"""
        self.basket = Basket()
        self.id = id
        self.client_type = client_type
        self.history = []
        self.money = money
        super().__init__()
    
    def __repr__(self):
        return f"Client ID: {self.id}\nType: {self.client_type}\nBalance: {self.money}€"

    def purchase_history(self):
        """Lets the customer see their purchase history"""
        if len(self.history) == 0:
            return "No purchases"
        else:
            for i in sorted(self.history):
                print(i)
                return ""

    def make_purchase(self, store):
        """Will check if a client has enough money to buy whatever is in the basket and if there are enough funds, will make the purchase"""
        total_cost = round(self.basket.calculate_cost(), 2)
        if self.client_type == "golden":
            total_cost *= 0.9
        date = datetime.now().strftime("%d.%m.%Y")
        if total_cost <= self.money:
            self.history.append([date, self.basket])
            self.money = round(self.money - total_cost, 2)
            store.purchase_made(self)
        else:
            print("Not enough money on balance")
            return 

class Item:
    def __init__(self, name, price, quantity):
        """Creates the item class for every product in the store"""
        self.name = name
        self.price = price
        self.quantity = quantity
        super().__init__()

    def __repr__(self):
        return f"{self.name} - Price: {self.price}€, Quantity: {self.quantity}"

    def can_buy(self):
        """Will check if there is enough of a current product"""
        if self.quantity > 0:
            return True
        return False

class Basket:
    def __init__(self):
        self.storage =  {}
        super().__init__()

    def __repr__(self):
        "Makes the basket look nicer"
        return_str = "Basket: "
        for i in self.storage:
            return_str += f"{i.name} - {self.storage[i]} "
        return return_str

    def add(self, item: Item, quantity):
        "Adds an item to the basket"
        if quantity <= item.quantity:
            if quantity > 0:
                self.storage[item] = quantity
            else:
                print("BRO, how you adding negative or zero items to your basket???")
        else:
            print("Not enough items in the shop")

    def remove(self, item):
        "Removes an item from the basket"
        for i in self.storage:
            if i.name == item:
                del self.storage[i]
                return

    def change_quantity(self, item, number):
        "Will change the number of item in your basket"
        for i in self.storage:
            if i.name == item:
                if int(number) >= 0 and int(number) <= i.quantity:
                    self.storage[i] = int(number)
                    return
                else:
                    raise NegativeQuantity

    def calculate_cost(self):
        "Will calculate the cost of the items in the basket"
        total = 0
        for product in self.storage:
            total += self.storage[product] * product.price
        return round(total, 2)


class NegativeQuantity(Exception):
    """Raised when attempting to make the quantity of a product go below 0."""


class Store:
    def __init__(self):
        self.inventory = {}
        self.purchases = []
        self.registered_clients = {}
        super().__init__()
    
    def add_item_to_inventory(self, item: Item):
        "Add items to shops inventory"
        self.inventory[item.name] = item.quantity
        return ""

    def purchase_made(self, client: Client):
        "Will remove items from shops inventory and adds the purchase to history"
        for item in client.basket.storage:
            if item.name in self.inventory:
                if client.basket.storage[item] < self.inventory[item.name]:
                    self.inventory[item.name] -= client.basket.storage[item]
                else:
                    del self.inventory[item]
        self.purchases.append(client.history)

    def add_customer_info(self, client: Client):
        "Add clients info to the database."
        self.registered_clients[client.id] = client.client_type
        return ""


if __name__ == '__main__':
    """
    
    client1 = Client("Kevin", "regular", 17)
    print(client1)

    item1 = Item("Leib", 7, 5)
    print(item1)
    print(item1.can_buy())

    basket1 = Basket()
    basket1.add(Item("Leib", 7, 5), 2)
    basket1.add(Item("Piim", 7, 5), 4)
    basket1.add(Item("Sai", 7, 5), 4)
    basket1.remove("Leib")
    basket1.change_quantity("Piim", 3)
    print(basket1)
    print(basket1.calculate_cost())

    store1 = Store()
    print(store1.add_item_to_inventory(item1))
    print(store1.add_customer_info(client1))

    
    client2 = Client("Kevin", "golden", 200)
    client2.basket.add(Item("Leib", 1, 10), 2)
    client2.basket.add(Item("Piim", 2, 10), 3)
    client2.basket.add(Item("Sai", 2, 10), 4)
    store2 = Store()
    store2.add_item_to_inventory(Item("Leib", 1, 100))
    store2.add_item_to_inventory(Item("Piim", 2, 100))
    store2.add_item_to_inventory(Item("Sai", 3, 100))
    store2.add_customer_info(client2)
    client2.make_purchase(store2)
    print(client2.purchase_history())
    print(client2.money)
    print(store2.inventory)
    print(store2.registered_clients)
    """

    def create_client_and_check_clients_type_regular():
        "Creates a client named Kevin, who is a regular client, and checks his type"
        client = Client("Kevin", "regular", 20)

        expected = "regular"

        assert client.client_type == expected, "Client types do not match"


    def create_client_and_check_clients_type_golden():
        "Creates a client named Kevin, who is a golden client, and checks his type"
        client = Client("Kevin", "golden", 20)

        expected = "golden"

        assert client.client_type == expected, "Client types do not match"
    

    def create_item_from_Item_class_and_checks_price():
        "Creates an Item object with price and quantity"
        item = Item("Milk", 1, 10)

        expected = 1

        assert item.price == expected


    def create_item_from_Item_class_and_checks_quantity():
        "Creates an Item object with price and quantity"
        item = Item("Milk", 1, 10)

        expected = 10

        assert item.quantity == expected


    def create_item_from_Item_class_and_checks_if_it_can_be_bought_can_buy():
        "Creates an Item object with price and quantity, checks if it can be bought"
        item = Item("Milk", 1, 10)

        expected = True

        assert item.can_buy() == expected


    def create_item_from_Item_class_and_checks_if_it_can_be_bought_can_not_buy():
        "Creates an Item object with price and quantity, checks if it can be bought"
        item = Item("Milk", 1, 0)

        expected = False

        assert item.can_buy() == expected


    def create_basket():
        "Create a shopping basket for the client and adds items to the basket"
        basket = Basket()
        basket.add(Item("Bread", 2, 50), 2)
        basket.add(Item("Milk", 1, 50), 4)
        basket.add(Item("Candy", 3, 50), 4)

        expected = 3

        assert len(basket.storage) == expected


    def create_basket_and_calculate_cost():
        "Calculates the cost of the current basket"
        basket = Basket()
        basket.add(Item("Bread", 2, 50), 2)
        basket.add(Item("Milk", 1, 50), 4)
        basket.add(Item("Candy", 3, 50), 4)

        expected = 20

        assert basket.calculate_cost() == expected


    def remove_items_from_basket():
        "Removes a certain item from the basket"
        basket = Basket()
        basket.add(Item("Bread", 2, 50), 2)
        basket.add(Item("Milk", 1, 50), 4)
        basket.add(Item("Candy", 3, 50), 4)
        basket.remove("Bread")

        expected = 2

        assert len(basket.storage) == expected


    def change_item_quantities_in_basket():
        "Changes certain items quantity"
        basket = Basket()
        basket.add(Item("Bread", 2, 50), 2)
        basket.add(Item("Milk", 1, 50), 4)
        basket.add(Item("Candy", 3, 50), 4)
        basket.change_quantity("Milk", 5)
        print(basket)


    def remove_items_from_basket_and_calculate_new_cost():
        "Removes item from basket and recalculates the cost"
        basket = Basket()
        basket.add(Item("Bread", 2, 50), 2)
        basket.add(Item("Milk", 1, 50), 4)
        basket.add(Item("Candy", 3, 50), 4)
        basket.remove("Bread")

        expected = 16

        assert basket.calculate_cost() == expected


    def change_item_quantities_in_basket_and_calculate_new_cost():
        "Changes item quantity in the basket and recalculates the cost"
        basket = Basket()
        basket.add(Item("Bread", 2, 50), 2)
        basket.add(Item("Milk", 1, 50), 4)
        basket.add(Item("Candy", 3, 50), 4)
        basket.change_quantity("Milk", 5)

        expected = 21

        assert basket.calculate_cost() == expected
    

    def create_store_with_inventory_and_customer_info(client, item):
        "Create store object"
        store = Store()
        store.add_item_to_inventory(item)
        store.add_customer_info(client)

        print(store.inventory)
        print(store.registered_clients)
    

    def make_a_purchase():
        "Making a purchase from the store"
        client2 = Client("Kevin", "golden", 10)
        client2.basket.add(Item("Leib", 1, 10), 2)
        client2.basket.add(Item("Piim", 2, 10), 3)
        client2.basket.add(Item("Sai", 2, 10), 4)
        store2 = Store()
        store2.add_item_to_inventory(Item("Leib", 1, 100))
        store2.add_item_to_inventory(Item("Piim", 2, 100))
        store2.add_item_to_inventory(Item("Sai", 3, 100))
        store2.add_customer_info(client2)
        client2.make_purchase(store2)

        print(client2.purchase_history())
        print(client2.money)
        print(store2.inventory)
        print(store2.registered_clients)


    def make_a_purchase_not_enough_money():
        "Making a purchase from the store, but the client has no money"
        "Making a purchase from the store"
        client2 = Client("Kevin", "golden", 10)
        client2.basket.add(Item("Leib", 1, 10), 2)
        client2.basket.add(Item("Piim", 2, 10), 3)
        client2.basket.add(Item("Sai", 2, 10), 4)
        store2 = Store()
        store2.add_item_to_inventory(Item("Leib", 1, 100))
        store2.add_item_to_inventory(Item("Piim", 2, 100))
        store2.add_item_to_inventory(Item("Sai", 3, 100))
        store2.add_customer_info(client2)
        client2.make_purchase(store2)

        print(client2.purchase_history())
        print(client2.money)
        print(store2.inventory)
        print(store2.registered_clients)


    def make_a_purchase_not_enough_items_in_store():
        "Making a purchase from the store, but the store has not enough items"
        client2 = Client("Kevin", "golden", 100)
        client2.basket.add(Item("Leib", 1, 10), 200)
        client2.basket.add(Item("Piim", 2, 10), 3)
        client2.basket.add(Item("Sai", 2, 10), 4)
        store2 = Store()
        store2.add_item_to_inventory(Item("Leib", 1, 100))
        store2.add_item_to_inventory(Item("Piim", 2, 100))
        store2.add_item_to_inventory(Item("Sai", 3, 100))
        store2.add_customer_info(client2)
        client2.make_purchase(store2)

        print(client2.purchase_history())
        print(client2.money)
        print(store2.inventory)
        print(store2.registered_clients)


    def make_a_purchase_regular_client():
        "Making a purchase from the store, the client is a regular type"
        client2 = Client("Kevin", "regular", 100)
        client2.basket.add(Item("Leib", 1, 10), 2)
        client2.basket.add(Item("Piim", 2, 10), 3)
        client2.basket.add(Item("Sai", 2, 10), 4)
        store2 = Store()
        store2.add_item_to_inventory(Item("Leib", 1, 100))
        store2.add_item_to_inventory(Item("Piim", 2, 100))
        store2.add_item_to_inventory(Item("Sai", 3, 100))
        store2.add_customer_info(client2)
        client2.make_purchase(store2)

        expected = 84

        assert client2.money == expected


    def make_a_purchase_golden_client():
        "Making a purchase from the store, the client is a golden type"
        client2 = Client("Kevin", "golden", 100)
        client2.basket.add(Item("Leib", 1, 10), 2)
        client2.basket.add(Item("Piim", 2, 10), 3)
        client2.basket.add(Item("Sai", 2, 10), 4)
        store2 = Store()
        store2.add_item_to_inventory(Item("Leib", 1, 100))
        store2.add_item_to_inventory(Item("Piim", 2, 100))
        store2.add_item_to_inventory(Item("Sai", 3, 100))
        store2.add_customer_info(client2)
        client2.make_purchase(store2)

        expected = 85.6

        assert client2.money == expected




from datetime import datetime

class Client:
    def __init__(self, id, client_type, money):
        "Creates the client class"
        self.basket = Basket()
        self.id = id
        self.client_type = client_type
        self.history = []
        self.money = money
        super().__init__()
    
    def __repr__(self):
        return f"Client ID: {self.id}\nType: {self.client_type}\nBalance: {self.money}€"

    def purchase_history(self):
        "Lets the customer see their purchase history"
        if len(self.history) == 0:
            return "No purchases"
        else:
            for i in sorted(self.history):
                print(i)
                return ""

    def make_purchase(self, store):
        "Will check if a client has enough money to buy whatever is in the basket and if there are enough funds, will make the purchase"
        total_cost = round(self.basket.calculate_cost(), 2)
        if self.client_type == "golden":
            total_cost *= 0.9
        date = datetime.now().strftime("%d.%m.%Y")
        if total_cost <= self.money:
            self.history.append([date, self.basket])
            self.money = round(self.money - total_cost, 2)
            store.purchase_made(self)
        else:
            print("Not enough money on balance")
            return

class Item:
    def __init__(self, name, price, quantity):
        "Creates the item class for every product in the store"
        self.name = name
        self.price = price
        self.quantity = quantity
        super().__init__()

    def __repr__(self):
        return f"{self.name} - Price: {self.price}€, Quantity: {self.quantity}"

    def can_buy(self):
        "Will check if there is enough of a current product"
        if self.quantity > 0:
            return True
        return False

class Basket:
    def __init__(self):
        self.storage =  {}
        super().__init__()

    def __repr__(self):
        "Makes the basket look nicer"
        return_str = "Basket: "
        for i in self.storage:
            return_str += f"{i.name} - {self.storage[i]} "
        return return_str

    def add(self, item: Item, quantity):
        "Adds an item to the basket"
        if quantity <= item.quantity:
            if quantity > 0:
                self.storage[item] = quantity
            else:
                print("BRO, how you adding negative or zero items to your basket???")
        else:
            print("Not enough items in the shop")

    def remove(self, item):
        "Removes an item from the basket"
        for i in self.storage:
            if i.name == item:
                del self.storage[i]
                return

    def change_quantity(self, item, number):
        "Will change the number of item in your basket"
        for i in self.storage:
            if i.name == item:
                if int(number) >= 0 and int(number) <= i.quantity:
                    self.storage[i] = int(number)
                    return
                else:
                    raise NegativeQuantity

    def calculate_cost(self):
        "Will calculate the cost of the items in the basket"
        total = 0
        for product in self.storage:
            total += self.storage[product] * product.price
        return round(total, 2)


class NegativeQuantity(Exception):
    "Raised when attempting to make the quantity of a product go below 0."


class Store:
    def __init__(self):
        self.inventory = {}
        self.purchases = []
        self.registered_clients = {}
        super().__init__()
    
    def add_item_to_inventory(self, item: Item):
        "Add items to shops inventory"
        self.inventory[item.name] = item.quantity
        return ""

    def purchase_made(self, client: Client):
        "Will remove items from shops inventory and adds the purchase to history"
        for item in client.basket.storage:
            if item.name in self.inventory:
                if client.basket.storage[item] < self.inventory[item.name]:
                    self.inventory[item.name] -= client.basket.storage[item]
                else:
                    del self.inventory[item]
        self.purchases.append(client.history)

    def add_customer_info(self, client: Client):
        "Add clients info to the database."
        self.registered_clients[client.id] = client.client_type
        return ""
